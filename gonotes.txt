function declaration
-------------------------------------
func name(argument) return type {
    statement
}


array declaration
-----------------------------------------
var array_name [size]type



multiple variable function argument
------------------------------------------
func name(arg1 ...type) return type{

    //statement
}


getting input from the user
--------------------------------
fmt.Scan(&variable_name)


for loop
-------------------------------------------
for i:-0;condition one;increment/decrement{
    //statement
}


pointers
-------------------------------------

func change(*int){
    *int =integer
}
func main(){
    num=43
    change(&num)

}
dfadfasdfadf a;dskfja;dlkf j;taiasd fkadsjf ;
fadfadfasdf


-----defer-------------------------------------
A defer statement adds the function call following the defer keyword onto a stack.
 All of the calls on that stack are called when the function in which they were added returns.
 Because the calls are placed on a stack, they are called in last-in-first-out order.
 package main

import "fmt"

func main() {
	defer fmt.Println("Bye")
	fmt.Println("Hi")
}


Output
Hi
Bye
-------------------------------------------------
Filenames consist of lowercase-letters (that may separated by underscores _), like scanner.go and scanner_test.go. Filenames may not contain spaces or any other special characters.
Identifiers begin with a letter (a letter is every letter in Unicode UTF-8 or _) and followed by 0 or more letters or Unicode digits, like: X56, group1, _x23, i, өԑ12.
The _ itself is a special identifier, called the blank identifier. It can be used in declarations or variable assignments like any other identifier (and any type can be assigned to it), but its value is discarded, so it cannot be used anymore in the code that follows.
Keywords or reserved words are: break, default, func, interface, select, case, defer, go, map, struct, chan, else, goto, package, switch, const, fallthrough, if, range, type, continue, for, import, return, var.
Predeclared identifiers (names of elementary types and some basic built-in functions): append, bool, byte, cap, close, complex, complex64, complex128, uint16, copy, false, float32, float64, imag, int, int8, int16, uint32, int32, int64, iota, len, make, new, nil, panic, uint64, print, println, real, recover, string, true, uint, uint8, uintptr,
Programs consist out of keywords, constants, variables, operators, types and functions.
Delimiters: parentheses ( ), brackets [ ] and braces { }.
Punctuation characters: ., ;, ....
Code is structured in statements. A statement doesn’t need to end with a ;. The Go compiler automatically inserts semicolons at the end of statements. However, if multiple statements are written on one line (which is not encouraged for readability reasons), they must be separated by ;.
Packages, import and visibility
hello_world.go

Every go file belongs to one and only one package (like a library or namespace in other languages). Many different .go files can belong to one package, so the filename(s) and package name are generally not the same.

The package to which the code-file belongs must be indicated on the first line, e.g. package main.
A standalone executable belongs to package main and each Go application contains one package main.
A package name is written in lowercase letters.
An application can consist of different packages. Even if you use only package main, you don’t have to stuff all code in one big file: you can make a number of smaller files each having package main as the first codeline. If you compile a source file with a package name other than main, like pack1, the object file is stored in pack1.a.

The standard library contains ready-to-use packages of the Go installation.

Package compilation
To build a program, the packages, and the files within them, must be compiled in the correct order. Package dependencies determine the order in which to build packages.
Within a package, the source files must all be compiled together. The package is compiled as a unit, and by convention each directory contains one package.
If a package is changed and recompiled, all the client programs that use this package must be recompiled.
The package model uses explicit dependencies to enable faster builds. [TWTG p52]
