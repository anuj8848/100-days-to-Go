function declaration
-------------------------------------
func name(argument) return type {
    statement
}


array declaration
-----------------------------------------
var array_name [size]type



multiple variable function argument
------------------------------------------
func name(arg1 ...type) return type{

    //statement
}


getting input from the user
--------------------------------
fmt.Scan(&variable_name)


for loop
-------------------------------------------
for i:-0;condition one;increment/decrement{
    //statement
}


pointers
-------------------------------------

func change(*int){
    *int =integer
}
func main(){
    num=43
    change(&num)

}
dfadfasdfadf a;dskfja;dlkf j;taiasd fkadsjf ;
fadfadfasdf


-----defer-------------------------------------
A defer statement adds the function call following the defer keyword onto a stack.
 All of the calls on that stack are called when the function in which they were added returns.
 Because the calls are placed on a stack, they are called in last-in-first-out order.
 package main

import "fmt"

func main() {
	defer fmt.Println("Bye")
	fmt.Println("Hi")
}


Output
Hi
Bye
-------------------------------------------------